/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<List<Integer>> pathSum(TreeNode root, int targetSum) {
        ArrayList<Integer> ans = new ArrayList<>();
        ArrayList<List<Integer>> bigAns = new ArrayList<>();
        hasPathSum(root,targetSum,ans,bigAns);
        return bigAns;
        
    }
    public void hasPathSum(TreeNode root, int targetSum,ArrayList<Integer> ans,ArrayList<List<Integer>> bigAns) {
        
        if(root == null)
        {
            return;
        }
        else if(targetSum == root.val && root.left == null && root.right == null)
        {
            ans.add(root.val);
            bigAns.add(new ArrayList<>(ans));
            ans.remove(ans.size()-1);
            return;
        }
        else
        {
            
            ans.add(root.val);
            hasPathSum(root.left,targetSum-root.val,ans,bigAns); 
            hasPathSum(root.right,targetSum-root.val,ans,bigAns);
            ans.remove(ans.size()-1);
            
        }
        
    }
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
}